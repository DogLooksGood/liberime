#+TITLE: liberime README

* liberime [开发中]

A emacs dynamic module provide librime bindings for emacs

目前只实现了几个方法，理想情况是暴露所有 librime 的 API 到 emacs-lisp.

** Build

*** Build On Linux:
#+NAME: build on linux
#+BEGIN_SRC shell
make liberime
ls build/

# try
make test
#+END_SRC

*** Build On Darwin
1. Build librime following this [[https://github.com/rime/librime/blob/master/README-mac.md][instruction]], you will need xcode (good luck).
2. setup environment variable RIME_PATH to librime project dir
   Example: ~export RIME_PATH=~/Develop/others/librime~
3. build just like on Linux
   #+NAME: build on osx
   #+BEGIN_SRC shell
   make liberime
   ls build/
   
   # try
   make test
   #+END_SRC

** Usage

*** Initialize
    :PROPERTIES:
    :ORDERED:  t
    :END:

shared_data_dir:
librime 安装后提供的共享数据，里面会有预置的 schema 等 [[https://github.com/rime/home/wiki/SharedData][各平台所在位置详情]]。

user_data_dir:
推荐放在 "~/.emacs.d/rime",

或者可以尝试使用外置输入法用的文件夹，比如Fcitx: "~/.config/fcitx/rime" 。（没测试过
也许会有冲突）


通过 use-package + quelpa加载
注意add-hook一定要放在:init block里面

#+NAME use git fetcher
#+BEGIN_SRC emacs-lisp
(use-package liberime-config
  :quelpa (liberime-config
           :fetcher git
           :url "https://gitlab.com/liberime/liberime"
           :files ("CMakeLists.txt" "Makefile" "src" "liberime-config.el"))
  :init
  (add-hook 'after-liberime-load-hook
            (lambda ()
              (liberime-select-schema "luna_pinyin_simp"))))
#+END_SRC

#+NAME: use local folder
#+BEGIN_SRC emacs-lisp
(use-package liberime-config
  :quelpa (liberime-config
           :fetcher file
           :path "~/Develop/emacs/liberime"
           :files ("CMakeLists.txt" "Makefile" "src" "liberime-config.el"))
  :init
  (add-hook 'after-liberime-load-hook
            (lambda ()
              (liberime-select-schema "luna_pinyin_simp"))))
#+END_SRC

#+NAME setup pyim
#+BEGIN_SRC emacs-lisp
(use-package pyim
  :after liberime-config
  :config
  (setq default-input-method "pyim")
  (setq pyim-default-scheme 'rime))
#+END_SRC

*** Avaliable methods

**** (liberime-start shared_data_dir user_data_dir)
initialize deploy and started a session with librime
returns t if success report error otherwise
**** (liberime-get-schema-list)
returns list of pairs(list of (schema_id, schema_name) ) avaliable schema

Example output(prebuilt schemas)
#+BEGIN_SRC emacs-lisp
(liberime-get-schema-list)
;; (("luna_pinyin" "朙月拼音") ("luna_pinyin_simp" "朙月拼音·简化字") ("luna_pinyin_fluency" "朙月拼音·語句流") ("bopomofo" "注音") ("bopomofo_tw" "注音·臺灣正體") ("cangjie5" "倉頡五代") ("stroke" "五筆畫") ("terra_pinyin" "地球拼音"))
#+END_SRC
**** (liberime-select-schema schema_id)
should use schema_id returns from libeliberime-get-schema-list
returns t if success, report error otherwise

Example output:
#+BEGIN_SRC emacs-lisp
(liberime-select-schema "luna_pinyin_simp")
;; t
#+END_SRC
